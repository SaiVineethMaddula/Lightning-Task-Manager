//Component

<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,forceCommunity:availableForAllPageTypes,force:lightningQuickAction" 
                access="global" controller="TaskManagementController">
    <aura:attribute name="toDoNotes" type="Object[]"/>
    <aura:attribute name="completedNotes" type="Object[]"/>
    <aura:attribute name="noteTitle" type="String" default=""/>
    <aura:attribute name="showSpinner" type="Boolean" default="false"/>
    <aura:attribute name="showModal" type="Boolean" default="false"/>
    <aura:attribute name="showCard" type="Boolean" default="false"/>
    
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    
    <aura:if isTrue="{!v.showSpinner}">
        <lightning:spinner variant="brand" size="large" />
    </aura:if>
    
    <div>
        <lightning:card title="Manage Notes">
            <aura:set attribute="actions">
                <lightning:button label="Create New" title="New Note" 
                                  onclick="{!c.createNewNote}" iconName="action:new_task"/>
            </aura:set>
            <div class="slds-p-arround_small">
                <div class="slds-text-heading_small">To Do TASKS</div><br/>
                <div class="flex-container">
                    <aura:iteration items="{!v.toDoNotes}" var="note">
                        <div class="box">
                            {!note.Title__c}<br/>
                            <lightning:input type="checkBox" name="{!note.Id}" class="completeCheckbox"
                                             checked="false" onchange="{!c.markNoteComplete}"/>
                        </div>
                    </aura:iteration>
                </div>
                <hr></hr>
                
                <div class="slds-text-heading_small">COMPLETED TASKS</div><br/>
                <div class="flex-container">
                    <aura:iteration items="{!v.completedNotes}" var="note">
                        <div class="box completed">
                            {!note.Title__c}
                        </div>
                    </aura:iteration>
                </div>
            </div>
            
            <aura:if isTrue="{!v.showModal}">
                <section aura:id="the_modal" role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open slds-modal_small" 
                         aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1">
                    <div class="slds-modal__container">
                        <header class="modal-header slds-modal__header slds-size_1-of-1">
                            <h4 class="title slds-text-heading--medium">Create New Note</h4>
                            <lightning:buttonIcon iconName="utility:close" onclick="{!c.closeModal}" alternativeText="Close" variant="border-inverse" 
                                                  class="slds-modal__close" />
                        </header>
                        <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                            <lightning:input label="Title" value="{!v.noteTitle}"/>
                        </div>
                        <footer class="slds-modal__footer">
                            <lightning:button label="Cancel" title="Cancel" variant="neutral" onclick="{!c.closeModal}"/>
                            <lightning:button variant="brand" label="Save" title="Save Note" onclick="{!c.createNote}"/>
                        </footer>
                    </div>
                </section>
                <div class="slds-backdrop slds-backdrop_open"></div>
            </aura:if>
        </lightning:card>
    </div>
</aura:component>

//Component JS

({
	doInit : function(component, event, helper) {
		helper.doInitHelper(component, event, helper);
	},
    
    createNewNote : function(component, event, helper) {
        component.set("v.showModal",true);
    },
    
    closeModal : function(component, event, helper) {
        component.set("v.showModal",false);
    },
    
    markNoteComplete : function(component, event, helper) {
        helper.markCompleteHelper(component, event, helper);
    },
    
    createNote : function(component, event, helper) {
        helper.createNoteHelper(component, event, helper);
    }
})

//Helper

({
    doInitHelper : function(component, event, helper) {
        var action = component.get("c.fetchNotes");
        action.setCallback(this, function(response){
            var state = response.getState();
            if(state === "SUCCESS") {
                console.log("::State1::",state);
                var result = response.getReturnValue();
                console.log("::Response1::",JSON.stringify(result));
                if(result) {
                    var toDoNotes = [];
                    var completedNotes = [];
                    for(var key of result) {
                        if(key.Status__c == 'To Do') {
                            toDoNotes.push(key);
                        }else if(key.Status__c == 'Completed') {
                            completedNotes.push(key);
                        }
                    }
                    component.set("v.toDoNotes",toDoNotes);
                    component.set("v.completedNotes",completedNotes);
                    component.set("v.showCard",true);
                }
            }
        });
        $A.enqueueAction(action);
    },
    
    markCompleteHelper : function(component, event, helper) {
        component.set("v.showCard",false);
        var selectedCheckBox = event.getSource();
        var recordId = selectedCheckBox.get("v.name");
        component.set("v.showSpinner",true);
        var action = component.get("c.completeTask");
        action.setParams({
            "noteId" : recordId
        });
        action.setCallback(this,function(response){
            var state = response.getState();
            if(state === "SUCCESS") {
                component.set("v.showSpinner",false);
                var result = response.getReturnValue();
                if(result) {
                    var toDoNotesList = component.get("v.toDoNotes");
                    var completedNotesList = component.get("v.completedNotes");
                    for(var i in toDoNotesList){
                        if(toDoNotesList[i].Id == recordId) {
                            completedNotesList.unshift(toDoNotesList[i]);
                            toDoNotesList.splice(i,1);
                        }
                    }
                    component.set("v.toDoNotes",toDoNotesList);
                    component.set("v.completedNotes",completedNotesList);
                    component.set("v.showCard",true);
                }
            }
        });
        $A.enqueueAction(action);
    },
    
    createNoteHelper : function(component, event, helper) {
        var noteTitle = component.get("v.noteTitle");
        if((noteTitle == '' || !noteTitle)) {
            var toastEvent = $A.get("e.force:showToast");
            toastEvent.setParams({
                "type" : "error",
                "mode" : "dismissible",
                "duration" : 1000,
                "title" : "Error",
                "message" : "Please fill the Title..."
            });
            toastEvent.fire();
        }else {
            var action = component.get("c.createNote");
            action.setParams({
                "title" : noteTitle
            });
            action.setCallback(this,function(response){
                var state = response.getState();
                if(state === "SUCCESS") {
                    console.log("::State 2::",state);
                    var result = response.getReturnValue();
                    console.log("::Response 2::",JSON.stringify(result));
                    var toDoList = component.get("v.toDoNotes");
                    toDoList.push(result);
                    component.set("v.toDoNotes",toDoList);
                    var toastEvent = $A.get("e.force:showToast");
                    toastEvent.setParams({
                        "type" : "success",
                        "mode" : "dismissible",
                        "duration" : 1000,
                        "title" : "Success",
                        "message" : "Task created successfully!!"
                    });
                    toastEvent.fire();
                    component.set("v.showModal",false);
                }
            });
            $A.enqueueAction(action);
        }
    }
})

//CSS

.THIS .box{
    border-radius: 10px;
    background-color: #faf59b;
    padding: 15px;
    width: 148px;
    height: 148px;
    display: inline-block;
    margin: 2%;
    font-size: 15px;
    text-align: center; 
    position: relative;
    overflow-wrap: break-word;
}

.THIS .completed{
    background-color: #aafac3;
}

.THIS .flex-container {
    display: flex;
    flex-flow: row wrap;
    width: 800px;
}

.THIS .slds-button__icon_left{
    margin-right: 0px;
   
}
.THIS .completeCheckbox{
    position: absolute;
    bottom: 5px;
    right: 0;
}
.THIS .slds-text-heading_small{
    margin-left: 2%;
}

//Apexx Class

public class TaskManagementController {
    @AuraEnabled
    public static List<Notes__c> fetchNotes() {
        List<Notes__c> noteList = new List<Notes__c>();
        noteList = [SELECT Id, Title__c, Status__c FROM Notes__c];
        System.debug('Notes'+noteList);
        return noteList;
    }
    
    @AuraEnabled
    public static Boolean completeTask(String noteId) {
        List<Notes__c> noteList = [SELECT Id, Status__c FROM Notes__c WHERE Id =: noteId];
        if(noteList != null && !noteList.isEmpty()) {
            for(Notes__c eachRecord : noteList) {
                eachRecord.Status__c = 'Completed';
            }
        }
        try{
            update noteList;
            return true;
        }catch(exception e) {
            return false;
        }
    }
    
    @AuraEnabled
    public static sObject createNote(String title) {
        Notes__c noteRecord = new Notes__c();
        noteRecord.Title__c = title;
        noteRecord.Status__c = 'To Do';
        insert noteRecord;
        return noteRecord;
    }
}